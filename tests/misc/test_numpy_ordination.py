from pathlib import Path

import numpy as np
import pandas as pd
import pytest
from patsy import dmatrix

from pynnmap.misc.numpy_ordination import NumpyCCA

RESOURCE_DIR = Path(__file__).parent / "../data"


def svd_flip_axes(arr1, arr2):
    """Check if two arrays are equal, allowing for sign differences in columns."""
    if arr1.shape[1] != arr2.shape[1]:
        raise ValueError("Arrays must have the same number of columns")

    for i in range(arr1.shape[1]):
        if not np.allclose(arr1[:, i], arr2[:, i]) and not np.allclose(
            arr1[:, i], -arr2[:, i]
        ):
            return False
    return True


@pytest.fixture()
def model_data():
    def get_df(fn):
        return pd.read_csv(fn, index_col="ID")

    X = get_df(RESOURCE_DIR / "dune_env.csv")
    Y = get_df(RESOURCE_DIR / "dune.csv")
    formula = "~ A1 + Management"
    X = dmatrix(formula, X)

    # Reorder to match R ordering of formula
    slices = X.design_info.term_name_slices
    X = np.hstack((X[:, slices["A1"]], X[:, slices["Management"]]))
    return X, np.array(Y)


@pytest.fixture()
def cca_model(model_data):
    X, Y = model_data
    return NumpyCCA(Y, X)


@pytest.fixture()
def eigenvalues():
    return np.array([0.31874900, 0.23718475, 0.13216523, 0.09167888])


@pytest.fixture()
def environmental_means():
    return np.array([4.6849635, 0.3109489, 0.2204380, 0.2978102])


@pytest.fixture()
def cca_Y_r():
    return np.array(
        [
            [-0.30555818, -0.05040574, -0.03573365, 0.11382705],
            [-0.29341637, -0.07699604, -0.05458405, -0.07374269],
            [-0.09302598, -0.07514044, -0.05326858, 0.16968334],
            [-0.12429968, -0.07969847, -0.05649986, 0.17997636],
            [0.40464230, 0.17263958, -0.05523003, -0.07461541],
            [-0.10190486, 0.18240081, -0.05835280, -0.07883425],
            [-0.45549924, 0.16650840, -0.05326858, -0.07196549],
            [-0.11719087, 0.16650840, -0.05326858, -0.07196549],
            [-0.24389309, 0.17062033, -0.05458405, -0.07374269],
            [-0.34699824, -0.07790727, -0.05523003, -0.07461541],
            [-0.25611480, -0.06720765, -0.04764486, -0.06436789],
            [0.25204484, -0.07028745, -0.04982819, 0.15872423],
            [0.28863533, -0.06824970, -0.04838359, 0.15412255],
            [0.86384431, -0.05820354, 0.14591872, -0.05574423],
            [1.24878254, -0.05697806, 0.14284641, -0.05457054],
            [0.22278879, -0.06824970, -0.04838359, 0.15412255],
            [-0.10136027, -0.04601394, 0.11535888, -0.04406968],
            [-0.01686821, -0.06173417, 0.15477018, -0.05912569],
            [-0.20953458, -0.06614920, 0.16583884, -0.06335416],
            [-0.25208125, -0.06614920, 0.16583884, -0.06335416],
        ]
    )


@pytest.fixture()
def cca_q():
    return np.array(
        [
            [-0.164161248, -0.13399703, -0.0786011091, -0.2293335727],
            [-0.157638054, -0.19109856, -0.1527828785, 0.4615931365],
            [-0.049978245, -0.17134125, -0.1855913445, -0.2811262043],
            [-0.066780053, -0.18374371, -0.1920113419, -0.3024746247],
            [0.217394231, 0.40862960, -0.0952959477, 0.0846052266],
            [-0.054748424, 0.39023889, -0.0007506735, 0.0006664596],
            [-0.244717140, 0.32782801, 0.0677344611, -0.0601357095],
            [-0.062960838, 0.35434376, 0.0038760473, -0.0034412151],
            [-0.131031656, 0.35339053, 0.0273415531, -0.0242742567],
            [-0.186424936, -0.19728761, -0.1451324782, 0.4586585241],
            [-0.137597775, -0.16680450, -0.1333598296, 0.4029115216],
            [0.135411189, -0.13370019, -0.2376056025, -0.2061485811],
            [0.155069441, -0.12638341, -0.2390030558, -0.1928155098],
            [0.464100682, -0.05936675, 0.1913974082, 0.1057791137],
            [0.670908896, -0.02652076, 0.1112741894, 0.1711087953],
            [0.119693364, -0.13154429, -0.2265739948, -0.2038502238],
            [-0.054455846, -0.10840412, 0.2993537956, -0.0478072478],
            [-0.009062452, -0.13610300, 0.3791402443, -0.0441776049],
            [-0.112572531, -0.16084280, 0.4423947321, -0.0794223516],
            [-0.135430745, -0.16417750, 0.4504257564, -0.0865524201],
        ]
    )


@pytest.fixture()
def cca_r():
    return np.array(
        [
            [1.86133, -0.06682079, 0.1471913, 0.03511143],
            [0.00000, 0.45803348, -0.1281773, -0.19705457],
            [0.00000, 0.00000000, 0.3657190, -0.26270090],
            [0.00000, 0.00000000, 0.0000000, -0.31629767],
        ]
    )


@pytest.fixture()
def cca_u():
    return np.array(
        [
            [0.5831222, -0.08561041, 1.81161743, 0.5622586],
            [0.4529725, 1.10378756, -0.10205702, -1.8500516],
            [0.5543811, -0.70827950, 1.28183629, 0.1915815],
            [0.5562972, -0.66676823, 1.31715503, 0.2162933],
            [0.5235074, -0.54988117, -1.71172726, 0.4063555],
            [0.5618289, 0.28034429, -1.00535240, 0.9005916],
            [0.5905700, 0.90301338, -0.47557125, 1.2712687],
            [0.5637450, 0.32185556, -0.97003365, 0.9253034],
            [0.5733254, 0.52941193, -0.79343994, 1.0488625],
            [0.4568047, 1.18681011, -0.03141953, -1.8006280],
            [0.4529725, 1.10378756, -0.10205702, -1.8500516],
            [0.5256400, -1.33094859, 0.75205514, -0.1790956],
            [0.5218078, -1.41397114, 0.68141766, -0.2285192],
            [-1.9429226, -1.38713769, -1.16474511, -0.7465659],
            [-1.9850763, -2.30038569, -1.94175746, -1.2902257],
            [0.5275561, -1.28943732, 0.78737389, -0.1543838],
            [-1.8413707, 0.81295976, 0.70714827, 0.5631598],
            [-1.8528671, 0.56389213, 0.49523581, 0.4148890],
            [-1.8356225, 0.93749358, 0.81310450, 0.6372952],
            [-1.8317903, 1.02051613, 0.88374198, 0.6867188],
        ]
    )


@pytest.fixture()
def cca_wa():
    return np.array(
        [
            [1.382728431, 0.9461779, 0.97254074, -0.25523792],
            [0.878817228, 0.7166732, 0.24311177, -1.94284898],
            [0.936669338, -0.4083682, 1.26748059, -0.29114143],
            [0.768583060, -0.4811688, 1.73213634, -0.48950923],
            [0.708620742, 0.9312026, -1.64667321, 0.88104926],
            [0.559083798, 0.9136703, -2.30930941, 1.60584114],
            [0.779249442, 0.9786067, -1.39783736, 0.63064272],
            [-0.008914146, -0.9760294, 0.33658738, 0.02238970],
            [0.752636860, -0.5466496, 0.26414137, 1.22690481],
            [0.438438221, 1.3862190, -0.62186191, -2.08812276],
            [-0.081268758, 1.3439195, 0.23831587, -1.34193407],
            [0.713363225, -1.3146995, 0.93978673, 1.01296695],
            [0.724646638, -1.4731015, 1.23286625, 0.31467572],
            [-1.924786460, -2.2648918, -1.66239665, -2.52964140],
            [-1.764138449, -2.2514767, -1.85119374, -0.98655601],
            [-1.063392400, -2.4269534, -0.05398852, 0.03159649],
            [-1.584796178, 2.5899572, 0.16543965, 1.11687006],
            [-0.787222664, 1.3412801, 0.21772517, -0.48603980],
            [-2.556307120, 2.0742833, 2.11543989, 1.79498243],
            [-2.341359099, -1.0099267, 0.40331265, 1.20092945],
        ]
    )


@pytest.fixture()
def cca_v():
    return np.array(
        [
            [0.38063011, 1.394443601, -0.61739838, -1.219440610],
            [-0.21489471, -1.555339797, 0.76353131, 0.116366649],
            [-3.25538683, 1.822691146, 2.12001607, 2.006838676],
            [0.95264225, -1.355282296, 1.27949699, 0.243458497],
            [-0.66801592, 1.192547561, -0.63642753, 0.702846553],
            [0.25003864, 0.467984679, 0.50697083, -1.700411411],
            [0.88988556, 1.077082713, -0.17550091, -2.333577333],
            [0.92424302, -2.903335117, 1.87436764, -0.754723783],
            [0.98533168, -1.369088493, 3.62308305, 0.714345731],
            [-3.47869980, -3.785832624, -4.27251027, -3.363426548],
            [-1.31416988, -1.806633335, -0.92576545, -0.558068638],
            [0.96198869, -0.035580515, 0.59527629, 0.558776909],
            [-3.25131425, 1.924974254, 2.23659710, 2.104776643],
            [-2.35276925, 1.944029136, 1.61242449, 0.224835752],
            [-0.70371468, -0.374426833, -1.06697325, 1.157716665],
            [0.97314582, -0.891146113, 0.19626612, 1.355631567],
            [0.79471636, 0.766735659, 0.41541912, -0.362441551],
            [0.12722360, 1.054835575, -1.42439957, 0.547484664],
            [0.59289385, 0.575858566, 0.35198135, -0.005765739],
            [0.94434256, -0.314117403, 0.14228106, 0.076703001],
            [-1.51275169, -1.181551867, -0.33018506, -0.057067072],
            [0.97990011, 0.004406278, -2.46037371, 2.383183217],
            [0.31889979, -0.488996802, 1.32928162, 0.341522637],
            [-3.25655923, 1.793246008, 2.08645487, 1.978644412],
            [-0.57067781, 0.571108815, -0.14269210, -0.426240765],
            [0.99135877, 0.480929934, -2.87335656, 2.883674785],
            [-0.09363499, 0.164551232, -0.79245803, -1.181154867],
            [-0.21702799, 2.031902443, 0.17858998, -4.199216378],
            [-0.53710376, -0.053455388, -0.10499549, 0.213978839],
            [-2.06957778, -1.304949359, 0.09747536, -0.458826421],
        ]
    )


@pytest.fixture()
def cca_biplot():
    return np.array(
        [
            [-0.3761611, -0.804049908, -0.41230724, -0.20496183],
            [0.3776116, 0.192515534, -0.67179831, 0.60748190],
            [-0.9988146, 0.006753067, 0.01396855, 0.04613680],
            [0.3534944, -0.624657544, 0.69576481, 0.02749574],
        ]
    )


@pytest.fixture()
def cca_coefficients():
    # R - coef(ord)
    return np.array(
        [
            [-0.01916075, -0.41511273, -0.3531874, -0.2471181],
            [0.12418500, -0.49135309, -0.6207454, 2.9483377],
            [-2.28476282, -0.08327143, 0.9857990, 2.5367705],
            [0.11673719, -1.47997688, 1.6664433, 2.2393276],
        ]
    )


@pytest.fixture()
def cca_species_scores():
    # R - scores(ord, choices=1:4)
    return np.array(
        [
            [0.21489562, 0.679116577, -0.22445231, -0.36922857],
            [-0.12132495, -0.757475626, 0.27757826, 0.03523410],
            [-1.83792175, 0.887680055, 0.77072201, 0.60764105],
            [0.53784143, -0.660044389, 0.46515519, 0.07371563],
            [-0.37714749, 0.580789942, -0.23137028, 0.21281154],
            [0.14116647, 0.227916104, 0.18430689, -0.51485941],
            [0.50241035, 0.524556694, -0.06380254, -0.70657268],
            [0.52180784, -1.413971139, 0.68141766, -0.22851919],
            [0.55629718, -0.666768230, 1.31715503, 0.21629332],
            [-1.96399947, -1.843761692, -1.55325129, -1.01839579],
            [-0.74195219, -0.879859641, -0.33655773, -0.16897493],
            [0.54311823, -0.017328286, 0.21640993, 0.16918938],
            [-1.83562246, 0.937493582, 0.81310450, 0.63729522],
            [-1.32832318, 0.946773618, 0.58618944, 0.06807694],
            [-0.39730225, -0.182351921, -0.38789318, 0.35053947],
            [0.54941731, -0.434002564, 0.07135164, 0.41046518],
            [0.44867985, 0.373412662, 0.15102369, -0.10974194],
            [0.07182772, 0.513721978, -0.51783386, 0.16577025],
            [0.33473518, 0.280452432, 0.12796119, -0.00174578],
            [0.53315561, -0.152980253, 0.05172562, 0.02322453],
            [-0.85406724, -0.575434861, -0.12003725, -0.01727906],
            [0.55323064, 0.002145928, -0.89445745, 0.72159261],
            [0.18004400, -0.238149348, 0.48325417, 0.10340800],
            [-1.83858366, 0.873339797, 0.75852099, 0.59910425],
            [-0.32219248, 0.278139226, -0.05187505, -0.12905940],
            [0.55969995, 0.234220653, -1.04459545, 0.87313405],
            [-0.05286431, 0.080139110, -0.28809444, -0.35763621],
            [-0.12252936, 0.989569339, 0.06492556, -1.27146058],
            [-0.30323729, -0.026033638, -0.03817062, 0.06478963],
            [-1.16843933, -0.635531435, 0.03543672, -0.13892585],
        ]
    )


@pytest.fixture()
def cca_species_tolerances():
    # R - tolerance(ord, choices = 1:4, useN2 = FALSE)
    return np.array(
        [
            [0.779007593, 0.59328807, 0.86041533, 1.30362244],
            [1.092682825, 0.93618599, 1.07763849, 0.62896910],
            [0.002816043, 0.06100886, 0.05190774, 0.03631879],
            [0.027403093, 0.80503811, 0.80143452, 0.64967004],
            [1.147025170, 0.60889167, 0.94438541, 1.00562942],
            [0.851324437, 0.82880588, 0.98832277, 1.04322137],
            [0.053691538, 0.81442861, 0.87565588, 1.23488140],
            [0.000000000, 0.00000000, 0.00000000, 0.00000000],
            [0.000000000, 0.00000000, 0.00000000, 0.00000000],
            [0.021076824, 0.45662400, 0.38850617, 0.27182987],
            [1.232228655, 1.14338124, 1.15402563, 0.78334647],
            [0.042571926, 0.66711190, 1.25516100, 0.91580504],
            [0.000000000, 0.00000000, 0.00000000, 0.00000000],
            [0.952145354, 0.09749624, 0.37029728, 1.02570820],
            [1.197755099, 1.20106465, 1.05063175, 0.83550629],
            [0.028040863, 1.01477383, 0.71034541, 0.66375391],
            [0.438240329, 0.69291800, 1.00952153, 1.19882880],
            [0.938093186, 0.59732209, 0.77540834, 1.13328403],
            [0.660544657, 0.75239327, 0.97710986, 1.11781727],
            [0.042217317, 0.92891777, 0.99484378, 0.97481950],
            [1.206457570, 1.23903815, 1.10927540, 0.76488657],
            [0.025137078, 0.68851785, 0.72196681, 0.43666902],
            [0.847369187, 0.94905308, 0.78549588, 0.78195934],
            [0.008888742, 0.19257232, 0.16384494, 0.11463897],
            [1.139648042, 0.97016396, 0.89618238, 1.09928115],
            [0.022480574, 0.48703590, 0.41438131, 0.28993418],
            [1.028331317, 1.04742682, 0.83404231, 1.12930423],
            [0.999012204, 0.24809102, 0.25010780, 0.97382342],
            [1.147385754, 1.07512052, 0.99641053, 0.94218580],
            [1.111242651, 1.08489203, 0.98065487, 0.59352254],
        ]
    )


def test_input_shapes(model_data):
    X, Y = model_data
    assert Y.shape == (20, 30)
    assert X.shape == (20, 4)


def test_Y_sum(model_data):
    _, Y = model_data
    assert pytest.approx(Y.sum()) == 685


def test_X_sum(model_data):
    X, _ = model_data
    assert pytest.approx(X.sum()) == 114


def test_cca_eigenvalues(cca_model: NumpyCCA, eigenvalues):
    assert np.allclose(cca_model.eigenvalues, eigenvalues)


def test_environmental_means(cca_model: NumpyCCA, environmental_means):
    assert np.allclose(cca_model.env_means, environmental_means)


def test_rank(cca_model: NumpyCCA):
    assert cca_model.rank == 4


def test_Y_r(cca_model: NumpyCCA, cca_Y_r: np.ndarray):
    assert np.allclose(cca_model.y_r, cca_Y_r)


def test_cca_qr(cca_model: NumpyCCA, cca_q: np.ndarray, cca_r: np.ndarray):
    assert np.allclose(cca_model.q, cca_q)
    assert np.allclose(cca_model.r, cca_r)


def test_cca_u(cca_model: NumpyCCA, cca_u: np.ndarray):
    assert svd_flip_axes(cca_model.u, cca_u)


def test_cca_wa(cca_model: NumpyCCA, cca_wa: np.ndarray):
    assert svd_flip_axes(cca_model.wa, cca_wa)


def test_cca_v(cca_model: NumpyCCA, cca_v: np.ndarray):
    assert svd_flip_axes(cca_model.v, cca_v)


def test_cca_biplot(cca_model: NumpyCCA, cca_biplot: np.ndarray):
    assert svd_flip_axes(cca_model.biplot_scores(), cca_biplot)


def test_cca_coefficients(cca_model: NumpyCCA, cca_coefficients: np.ndarray):
    assert svd_flip_axes(cca_model.coefficients(), cca_coefficients)


def test_cca_species_scores(cca_model: NumpyCCA, cca_species_scores: np.ndarray):
    assert svd_flip_axes(cca_model.species_centroids(), cca_species_scores)


def test_cca_species_tolerances(
    cca_model: NumpyCCA, cca_species_tolerances: np.ndarray
):
    assert np.allclose(cca_model.species_tolerances(), cca_species_tolerances)


def test_site_lc_scores(cca_model: NumpyCCA, cca_u: np.ndarray):
    assert svd_flip_axes(cca_model.site_lc_scores(), cca_u)


def test_site_wa_scores(cca_model: NumpyCCA, cca_wa: np.ndarray):
    assert svd_flip_axes(cca_model.site_wa_scores(), cca_wa)
